var cv = require('lib/opencv');
var AWS = require('aws-sdk');
var s3 = new AWS.S3();
var async = require('async');
//var gm = require('gm').subClass({ imageMagick: true });
var fs = require('fs');


/*
var COLOR = [0, 255, 0]; // default red
var thickness = 2; // default 1

cv.readImage('./1.jpg', function(err, im) {
  if (err) throw err;
  if (im.width() < 1 || im.height() < 1) throw new Error('Image has no size');

  im.detectObject('../data/haarcascade_frontalface_alt2.xml', {}, function(err, faces) {
    if (err) throw err;

    for (var i = 0; i < faces.length; i++) {
      face = faces[i];
      im.rectangle([face.x, face.y], [face.width, face.height], COLOR, 2);
    }

    im.save('./tmp/face-detection-rectangle.png');
    console.log('Image saved to ./tmp/face-detection-rectangle.png');
  });

});

*/




exports.handler = function(event, context) {
	var srcBucket = event.Records[0].s3.bucket.name;
  var srcKey    = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, " "));
	var dstBucket = srcBucket;
	var dstKey    = srcKey.replace('images/','resized/');

	// Infer the image type.
	var typeMatch = srcKey.match(/\.([^.]*)$/);
	if (!typeMatch) {
		console.error('unable to infer image type for key ' + srcKey);
		return;
	}
	var imageType = typeMatch[1];
	if (imageType != "jpg" && imageType != "png") {
		console.log('skipping non-image ' + srcKey);
		return;
	}

	// Download the image from S3, transform, and upload to a different S3 bucket.
	async.waterfall([
		function download(next) {
			// Download the image from S3 into a buffer.
			s3.getObject({
					Bucket: srcBucket,
					Key: srcKey
				},next);
			},

		function transform(response, next) {

      fs.writeFile("/tmp/image", response.Body, function(err) {
          if(err) {
              return console.log(err);
          }
          console.log("The file was saved!");
      });



			/*gm(response.Body).size(function(err, size) {
				var scalingFactor = Math.min(
					MAX_WIDTH / size.width,
					MAX_HEIGHT / size.height
				);
				var width  = scalingFactor * size.width;
				var height = scalingFactor * size.height;

				// Transform the image buffer in memory.
				this.resize(width, height)
					.toBuffer(imageType, function(err, buffer) {
						if (err) next(err);
						else next(null, response.ContentType, buffer);
					});
			});*/



		}/*,
		function upload(contentType, data, next) {
			// Stream the transformed image to a different S3 bucket.
			s3.putObject({
					Bucket: dstBucket,
					Key: dstKey,
					Body: data,
					ContentType: contentType
				},next);
			}*/
		], function (err) {
        context.done();
		}
	);
};

